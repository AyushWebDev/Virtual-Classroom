import { Context } from "koa";
import knex from "knex";
import config from "../../knexfile";
const { v4: uuidv4 } = require("uuid");
import {
    ASSIGNMENT_STATUS,
  CreateAssignmentRequest,
  SUBMISSION_STATUS,
  UpdateAssignmentFields,
  UpdateAssignmentRequest,
} from "../model/assignment";
import { ROLE } from "../model/auth";

const query = knex(config); // configuring knex and getting query builder

export const createAssignment = async (
  ctx: Context,
  req: CreateAssignmentRequest
) => {
  //generating uuid for assign_id , it could be generated by default
  //but in that case one more GET call would be required to insert
  //into student and assignment mapping
  const assignmentId = uuidv4();
  // creating assignments
  const { description, userId, deadline } = req;
  const publishedAt = req.publishedAt ?? Date.now();
  const status = publishedAt > Date.now() ? ASSIGNMENT_STATUS.SCHEDULED :ASSIGNMENT_STATUS.ONGOING;
  const assigment = await query("assignments").insert({
    assignment_id: assignmentId,
    description: description,
    tutor_id: userId,
    published_at: new Date(publishedAt),
    deadline: new Date(deadline),
    status,
  });
  console.log(assigment);
  const studentList = req.studentList;

  //assigning assignments to all the students in student_list
  studentList.map(async (studentId) => {
    await query("submissions").insert({
      student_id: studentId,
      assignment_id: assignmentId,
      status: SUBMISSION_STATUS.PENDING,
    });
  });
  return {
    status: 201,
    body: "Created",
  };
};

export const updateAssignment = async (
  ctx: Context,
  reqBody: UpdateAssignmentRequest,
  assignmentId: string
) => {
  let updateFields: UpdateAssignmentFields = {};
  if (reqBody.description) updateFields.description = reqBody.description;
  if (reqBody.deadline) updateFields.deadline = new Date(reqBody.deadline);
  //query for updating assignments field
  const updatedAssignment = await query("assignments")
    .where("assignment_id", assignmentId)
    .update(updateFields);
  console.log(updatedAssignment);
  //creating response
  return {
    status: 200,
    body: "Updated",
  };
};

export const deleteAssignment = async (ctx: Context, assignmentId: string) => {
  //deleting entities from submissions table
  await query("submissions").where("assignment_id", assignmentId).del();
  //deleting entity from assignments tables
  await query("assignments").where("assignment_id", assignmentId).del();
  return {
    status: 204,
  };
};

const getTutorAssignments = async (ctx: Context, tutorId: string) => {
  const publishedAt = ctx.query.publishedAt;
  return publishedAt
    ? await query("assignments").select("*").where("tutor_id", tutorId).andWhere("status", publishedAt)
    : await query("assignments").select("*").where("tutor_id", tutorId);
};

const getStudentsAssignments = async (ctx: Context, studentId: string) => {
  const publishedAt = ctx.query.publishedAt;
  const status = ctx.query.status;

  return query("assignments")
    .join("submissions", "assignments.assignment_id", "=", "submissions.assignment_id")
      .select("assignments.*")
      .where('submissions.student_id', studentId)
      .andWhere('assignments.status', publishedAt)
      .andWhere('submissions.status', status)
};

export const getAssignmentFeeds = async (ctx: Context) => {
  const { userId } = ctx.state.user;
  const user = await query("users")
    .select("user_role")
    .where("user_id", userId)
    .first();
  if (user.user_role === ROLE.TUTOR) {
    const assignments = await getTutorAssignments(ctx,userId);
    return {
      status: 200,
      body: assignments,
    };
  }
  const assignments = await getStudentsAssignments(ctx,userId);
  return {
    status: 200,
    body: assignments,
  };
};
